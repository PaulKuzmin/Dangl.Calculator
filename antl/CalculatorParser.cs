//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 0419
#pragma warning disable 3021
#pragma warning disable 1574
#pragma warning disable 1591
#pragma warning disable 1658
#pragma warning disable 1584
#pragma warning disable 0108

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NUMBER=10, FLOAT=11, DIGIT=12, MOD=13, WHOLE=14, MUL=15, DIV=16, ADD=17, 
		SUB=18, PI=19, EXPONENT=20, NEGEXPONENT=21, EULER=22, SQRT=23, SQR=24, 
		FLOOR=25, CEIL=26, ABS=27, ROUNDK=28, ROUND=29, TRUNC=30, SIN=31, COS=32, 
		TAN=33, COT=34, SINH=35, COSH=36, TANH=37, ARCSIN=38, ARCCOS=39, ARCTAN=40, 
		ARCTAN2=41, ARCCOT=42, EXP=43, LN=44, EEX=45, LOG=46, RAD=47, DEG=48, 
		WS=49, COM=50, SUBSTITUTION=51, SEMICOLON=52, INVALID=53;
	public const int
		RULE_calculator = 0, RULE_expression = 1, RULE_trailingComment = 2, RULE_compileUnit = 3;
	public static readonly string[] ruleNames = {
		"calculator", "expression", "trailingComment", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", "'^'", "'**'", "'%'", "'~'", "'//'", "'()'", 
		null, null, null, null, null, "'*'", "'/'", "'+'", "'-'", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NUMBER", 
		"FLOAT", "DIGIT", "MOD", "WHOLE", "MUL", "DIV", "ADD", "SUB", "PI", "EXPONENT", 
		"NEGEXPONENT", "EULER", "SQRT", "SQR", "FLOOR", "CEIL", "ABS", "ROUNDK", 
		"ROUND", "TRUNC", "SIN", "COS", "TAN", "COT", "SINH", "COSH", "TANH", 
		"ARCSIN", "ARCCOS", "ARCTAN", "ARCTAN2", "ARCCOT", "EXP", "LN", "EEX", 
		"LOG", "RAD", "DEG", "WS", "COM", "SUBSTITUTION", "SEMICOLON", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    protected const int EOF = Eof;

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CalculatorContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompileUnitContext compileUnit() {
			return GetRuleContext<CompileUnitContext>(0);
		}
		public TrailingCommentContext trailingComment() {
			return GetRuleContext<TrailingCommentContext>(0);
		}
		public CalculatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterCalculator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitCalculator(this);
		}
	}

	[RuleVersion(0)]
	public CalculatorContext calculator() {
		CalculatorContext _localctx = new CalculatorContext(Context, State);
		EnterRule(_localctx, 0, RULE_calculator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; expression(0);
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 9; Match(T__0);
				}
			}

			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 12; trailingComment();
				}
			}

			State = 15; compileUnit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TanContext : ExpressionContext {
		public ITerminalNode TAN() { return GetToken(CalculatorParser.TAN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TanContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterTan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitTan(this);
		}
	}
	public partial class CoshContext : ExpressionContext {
		public ITerminalNode COSH() { return GetToken(CalculatorParser.COSH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CoshContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterCosh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitCosh(this);
		}
	}
	public partial class SqRootContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SqRootContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSqRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSqRoot(this);
		}
	}
	public partial class NegExponentContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NEGEXPONENT() { return GetToken(CalculatorParser.NEGEXPONENT, 0); }
		public NegExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterNegExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitNegExponent(this);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXPONENT() { return GetToken(CalculatorParser.EXPONENT, 0); }
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}
	public partial class Arctan2Context : ExpressionContext {
		public ITerminalNode ARCTAN2() { return GetToken(CalculatorParser.ARCTAN2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Arctan2Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterArctan2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitArctan2(this);
		}
	}
	public partial class MulDivContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MulDivContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
	}
	public partial class ArcsinContext : ExpressionContext {
		public ITerminalNode ARCSIN() { return GetToken(CalculatorParser.ARCSIN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArcsinContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterArcsin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitArcsin(this);
		}
	}
	public partial class UnaryPlusContext : ExpressionContext {
		public ITerminalNode ADD() { return GetToken(CalculatorParser.ADD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPlusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterUnaryPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitUnaryPlus(this);
		}
	}
	public partial class ArccotContext : ExpressionContext {
		public ITerminalNode ARCCOT() { return GetToken(CalculatorParser.ARCCOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArccotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterArccot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitArccot(this);
		}
	}
	public partial class ArccosContext : ExpressionContext {
		public ITerminalNode ARCCOS() { return GetToken(CalculatorParser.ARCCOS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArccosContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterArccos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitArccos(this);
		}
	}
	public partial class EulerContext : ExpressionContext {
		public ITerminalNode EULER() { return GetToken(CalculatorParser.EULER, 0); }
		public EulerContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterEuler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitEuler(this);
		}
	}
	public partial class ArctanContext : ExpressionContext {
		public ITerminalNode ARCTAN() { return GetToken(CalculatorParser.ARCTAN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArctanContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterArctan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitArctan(this);
		}
	}
	public partial class ParenthesisContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
	}
	public partial class AbsContext : ExpressionContext {
		public ITerminalNode ABS() { return GetToken(CalculatorParser.ABS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterAbs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitAbs(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}
	public partial class SubstitutionContext : ExpressionContext {
		public ITerminalNode SUBSTITUTION() { return GetToken(CalculatorParser.SUBSTITUTION, 0); }
		public SubstitutionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSubstitution(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSubstitution(this);
		}
	}
	public partial class SinhContext : ExpressionContext {
		public ITerminalNode SINH() { return GetToken(CalculatorParser.SINH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SinhContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSinh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSinh(this);
		}
	}
	public partial class RoundContext : ExpressionContext {
		public ITerminalNode ROUND() { return GetToken(CalculatorParser.ROUND, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RoundContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterRound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitRound(this);
		}
	}
	public partial class TruncContext : ExpressionContext {
		public ITerminalNode TRUNC() { return GetToken(CalculatorParser.TRUNC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TruncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterTrunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitTrunc(this);
		}
	}
	public partial class PiContext : ExpressionContext {
		public ITerminalNode PI() { return GetToken(CalculatorParser.PI, 0); }
		public PiContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterPi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitPi(this);
		}
	}
	public partial class TanhContext : ExpressionContext {
		public ITerminalNode TANH() { return GetToken(CalculatorParser.TANH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TanhContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterTanh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitTanh(this);
		}
	}
	public partial class FloorContext : ExpressionContext {
		public ITerminalNode FLOOR() { return GetToken(CalculatorParser.FLOOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FloorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterFloor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitFloor(this);
		}
	}
	public partial class LnContext : ExpressionContext {
		public ITerminalNode LN() { return GetToken(CalculatorParser.LN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LnContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterLn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitLn(this);
		}
	}
	public partial class ModContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(CalculatorParser.MOD, 0); }
		public ModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}
	public partial class LogContext : ExpressionContext {
		public ITerminalNode LOG() { return GetToken(CalculatorParser.LOG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
	}
	public partial class AddSubContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(CalculatorParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(CalculatorParser.SUB, 0); }
		public AddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
	}
	public partial class CosContext : ExpressionContext {
		public ITerminalNode COS() { return GetToken(CalculatorParser.COS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CosContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterCos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitCos(this);
		}
	}
	public partial class DegContext : ExpressionContext {
		public ITerminalNode DEG() { return GetToken(CalculatorParser.DEG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DegContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterDeg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitDeg(this);
		}
	}
	public partial class SqrtContext : ExpressionContext {
		public ITerminalNode SQRT() { return GetToken(CalculatorParser.SQRT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SqrtContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSqrt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSqrt(this);
		}
	}
	public partial class CotContext : ExpressionContext {
		public ITerminalNode COT() { return GetToken(CalculatorParser.COT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterCot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitCot(this);
		}
	}
	public partial class WholeContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WHOLE() { return GetToken(CalculatorParser.WHOLE, 0); }
		public WholeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterWhole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitWhole(this);
		}
	}
	public partial class UnaryContext : ExpressionContext {
		public ITerminalNode SUB() { return GetToken(CalculatorParser.SUB, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}
	public partial class RadContext : ExpressionContext {
		public ITerminalNode RAD() { return GetToken(CalculatorParser.RAD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RadContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterRad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitRad(this);
		}
	}
	public partial class MultContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}
	public partial class SqrContext : ExpressionContext {
		public ITerminalNode SQR() { return GetToken(CalculatorParser.SQR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SqrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSqr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSqr(this);
		}
	}
	public partial class SinContext : ExpressionContext {
		public ITerminalNode SIN() { return GetToken(CalculatorParser.SIN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SinContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSin(this);
		}
	}
	public partial class EexContext : ExpressionContext {
		public ITerminalNode EEX() { return GetToken(CalculatorParser.EEX, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EexContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterEex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitEex(this);
		}
	}
	public partial class PowContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PowContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitPow(this);
		}
	}
	public partial class CeilContext : ExpressionContext {
		public ITerminalNode CEIL() { return GetToken(CalculatorParser.CEIL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CeilContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterCeil(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitCeil(this);
		}
	}
	public partial class ExpContext : ExpressionContext {
		public ITerminalNode EXP() { return GetToken(CalculatorParser.EXP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}
	public partial class RoundkContext : ExpressionContext {
		public ITerminalNode ROUNDK() { return GetToken(CalculatorParser.ROUNDK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoundkContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterRoundk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitRoundk(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new UnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 18; Match(SUB);
				State = 19; expression(43);
				}
				break;
			case 2:
				{
				_localctx = new UnaryPlusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20; Match(ADD);
				State = 21; expression(42);
				}
				break;
			case 3:
				{
				_localctx = new FloorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; Match(FLOOR);
				State = 23; expression(41);
				}
				break;
			case 4:
				{
				_localctx = new CeilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24; Match(CEIL);
				State = 25; expression(40);
				}
				break;
			case 5:
				{
				_localctx = new AbsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(ABS);
				State = 27; expression(39);
				}
				break;
			case 6:
				{
				_localctx = new RoundkContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; Match(ROUNDK);
				State = 29; Match(T__1);
				State = 30; expression(0);
				State = 31; Match(SEMICOLON);
				State = 32; expression(0);
				State = 33; Match(T__2);
				}
				break;
			case 7:
				{
				_localctx = new RoundContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35; Match(ROUND);
				State = 36; expression(37);
				}
				break;
			case 8:
				{
				_localctx = new TruncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; Match(TRUNC);
				State = 38; expression(36);
				}
				break;
			case 9:
				{
				_localctx = new SinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39; Match(SIN);
				State = 40; expression(35);
				}
				break;
			case 10:
				{
				_localctx = new CosContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41; Match(COS);
				State = 42; expression(34);
				}
				break;
			case 11:
				{
				_localctx = new TanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43; Match(TAN);
				State = 44; expression(33);
				}
				break;
			case 12:
				{
				_localctx = new CotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45; Match(COT);
				State = 46; expression(32);
				}
				break;
			case 13:
				{
				_localctx = new SinhContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 47; Match(SINH);
				State = 48; expression(31);
				}
				break;
			case 14:
				{
				_localctx = new CoshContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49; Match(COSH);
				State = 50; expression(30);
				}
				break;
			case 15:
				{
				_localctx = new TanhContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(TANH);
				State = 52; expression(29);
				}
				break;
			case 16:
				{
				_localctx = new ArcsinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 53; Match(ARCSIN);
				State = 54; expression(28);
				}
				break;
			case 17:
				{
				_localctx = new ArccosContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55; Match(ARCCOS);
				State = 56; expression(27);
				}
				break;
			case 18:
				{
				_localctx = new ArctanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(ARCTAN);
				State = 58; expression(26);
				}
				break;
			case 19:
				{
				_localctx = new Arctan2Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; Match(ARCTAN2);
				State = 60; Match(T__1);
				State = 61; expression(0);
				State = 62; Match(SEMICOLON);
				State = 63; expression(0);
				State = 64; Match(T__2);
				}
				break;
			case 20:
				{
				_localctx = new ArccotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 66; Match(ARCCOT);
				State = 67; expression(24);
				}
				break;
			case 21:
				{
				_localctx = new ExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68; Match(EXP);
				State = 69; expression(23);
				}
				break;
			case 22:
				{
				_localctx = new LnContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70; Match(LN);
				State = 71; expression(22);
				}
				break;
			case 23:
				{
				_localctx = new EexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72; Match(EEX);
				State = 73; expression(21);
				}
				break;
			case 24:
				{
				_localctx = new LogContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 74; Match(LOG);
				State = 75; expression(20);
				}
				break;
			case 25:
				{
				_localctx = new RadContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76; Match(RAD);
				State = 77; expression(19);
				}
				break;
			case 26:
				{
				_localctx = new DegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; Match(DEG);
				State = 79; expression(18);
				}
				break;
			case 27:
				{
				_localctx = new SqrtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80; Match(SQRT);
				State = 81; expression(17);
				}
				break;
			case 28:
				{
				_localctx = new SqrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82; Match(SQR);
				State = 83; expression(16);
				}
				break;
			case 29:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84; Match(T__1);
				State = 85; expression(0);
				State = 86; Match(T__2);
				}
				break;
			case 30:
				{
				_localctx = new MultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; Match(T__1);
				State = 89; expression(0);
				State = 90; Match(T__2);
				State = 91; expression(6);
				}
				break;
			case 31:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(NUMBER);
				}
				break;
			case 32:
				{
				_localctx = new PiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94; Match(PI);
				State = 96;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 95; Match(T__8);
					}
					break;
				}
				}
				break;
			case 33:
				{
				_localctx = new EulerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(EULER);
				}
				break;
			case 34:
				{
				_localctx = new SubstitutionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; Match(SUBSTITUTION);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 131;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 102;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 103; Match(EXPONENT);
						State = 104; expression(16);
						}
						break;
					case 2:
						{
						_localctx = new NegExponentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 105;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 106; Match(NEGEXPONENT);
						State = 107; expression(15);
						}
						break;
					case 3:
						{
						_localctx = new PowContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 108;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 109;
						((PowContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__3 || _la==T__4) ) {
							((PowContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 110; expression(14);
						}
						break;
					case 4:
						{
						_localctx = new ModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 111;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 112;
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==MOD) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 113; expression(13);
						}
						break;
					case 5:
						{
						_localctx = new WholeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 115; Match(WHOLE);
						State = 116; expression(12);
						}
						break;
					case 6:
						{
						_localctx = new SqRootContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 117;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 118;
						((SqRootContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
							((SqRootContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 119; expression(11);
						}
						break;
					case 7:
						{
						_localctx = new MulDivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 120;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 121;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 122; expression(10);
						}
						break;
					case 8:
						{
						_localctx = new AddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 124;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 125; expression(6);
						}
						break;
					case 9:
						{
						_localctx = new MultContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 127; Match(T__1);
						State = 128; expression(0);
						State = 129; Match(T__2);
						}
						break;
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TrailingCommentContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(CalculatorParser.SEMICOLON, 0); }
		public TrailingCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterTrailingComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitTrailingComment(this);
		}
	}

	[RuleVersion(0)]
	public TrailingCommentContext trailingComment() {
		TrailingCommentContext _localctx = new TrailingCommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_trailingComment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(SEMICOLON);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 137;
					MatchWildcard();
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 6, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x94', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\r', '\n', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x10', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x63', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'g', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x86', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x89', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x8D', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x90', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x8E', '\x3', '\x4', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\a', '\x3', 
		'\x2', '\x6', '\a', '\x4', '\x2', '\b', '\b', '\xF', '\xF', '\x3', '\x2', 
		'\t', '\n', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x13', '\x14', 
		'\x2', '\xBD', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x91', '\x3', '\x2', '\x2', '\x2', '\n', '\f', '\x5', '\x4', '\x3', 
		'\x2', '\v', '\r', '\a', '\x3', '\x2', '\x2', '\f', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', '\x2', '\r', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x10', '\x5', '\x6', '\x4', '\x2', '\xF', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x5', 
		'\b', '\x5', '\x2', '\x12', '\x3', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x14', '\b', '\x3', '\x1', '\x2', '\x14', '\x15', '\a', '\x14', '\x2', 
		'\x2', '\x15', 'g', '\x5', '\x4', '\x3', '-', '\x16', '\x17', '\a', '\x13', 
		'\x2', '\x2', '\x17', 'g', '\x5', '\x4', '\x3', ',', '\x18', '\x19', '\a', 
		'\x1B', '\x2', '\x2', '\x19', 'g', '\x5', '\x4', '\x3', '+', '\x1A', '\x1B', 
		'\a', '\x1C', '\x2', '\x2', '\x1B', 'g', '\x5', '\x4', '\x3', '*', '\x1C', 
		'\x1D', '\a', '\x1D', '\x2', '\x2', '\x1D', 'g', '\x5', '\x4', '\x3', 
		')', '\x1E', '\x1F', '\a', '\x1E', '\x2', '\x2', '\x1F', ' ', '\a', '\x4', 
		'\x2', '\x2', ' ', '!', '\x5', '\x4', '\x3', '\x2', '!', '\"', '\a', '\x36', 
		'\x2', '\x2', '\"', '#', '\x5', '\x4', '\x3', '\x2', '#', '$', '\a', '\x5', 
		'\x2', '\x2', '$', 'g', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\x1F', 
		'\x2', '\x2', '&', 'g', '\x5', '\x4', '\x3', '\'', '\'', '(', '\a', ' ', 
		'\x2', '\x2', '(', 'g', '\x5', '\x4', '\x3', '&', ')', '*', '\a', '!', 
		'\x2', '\x2', '*', 'g', '\x5', '\x4', '\x3', '%', '+', ',', '\a', '\"', 
		'\x2', '\x2', ',', 'g', '\x5', '\x4', '\x3', '$', '-', '.', '\a', '#', 
		'\x2', '\x2', '.', 'g', '\x5', '\x4', '\x3', '#', '/', '\x30', '\a', '$', 
		'\x2', '\x2', '\x30', 'g', '\x5', '\x4', '\x3', '\"', '\x31', '\x32', 
		'\a', '%', '\x2', '\x2', '\x32', 'g', '\x5', '\x4', '\x3', '!', '\x33', 
		'\x34', '\a', '&', '\x2', '\x2', '\x34', 'g', '\x5', '\x4', '\x3', ' ', 
		'\x35', '\x36', '\a', '\'', '\x2', '\x2', '\x36', 'g', '\x5', '\x4', '\x3', 
		'\x1F', '\x37', '\x38', '\a', '(', '\x2', '\x2', '\x38', 'g', '\x5', '\x4', 
		'\x3', '\x1E', '\x39', ':', '\a', ')', '\x2', '\x2', ':', 'g', '\x5', 
		'\x4', '\x3', '\x1D', ';', '<', '\a', '*', '\x2', '\x2', '<', 'g', '\x5', 
		'\x4', '\x3', '\x1C', '=', '>', '\a', '+', '\x2', '\x2', '>', '?', '\a', 
		'\x4', '\x2', '\x2', '?', '@', '\x5', '\x4', '\x3', '\x2', '@', '\x41', 
		'\a', '\x36', '\x2', '\x2', '\x41', '\x42', '\x5', '\x4', '\x3', '\x2', 
		'\x42', '\x43', '\a', '\x5', '\x2', '\x2', '\x43', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\a', ',', '\x2', '\x2', '\x45', 'g', '\x5', 
		'\x4', '\x3', '\x1A', '\x46', 'G', '\a', '-', '\x2', '\x2', 'G', 'g', 
		'\x5', '\x4', '\x3', '\x19', 'H', 'I', '\a', '.', '\x2', '\x2', 'I', 'g', 
		'\x5', '\x4', '\x3', '\x18', 'J', 'K', '\a', '/', '\x2', '\x2', 'K', 'g', 
		'\x5', '\x4', '\x3', '\x17', 'L', 'M', '\a', '\x30', '\x2', '\x2', 'M', 
		'g', '\x5', '\x4', '\x3', '\x16', 'N', 'O', '\a', '\x31', '\x2', '\x2', 
		'O', 'g', '\x5', '\x4', '\x3', '\x15', 'P', 'Q', '\a', '\x32', '\x2', 
		'\x2', 'Q', 'g', '\x5', '\x4', '\x3', '\x14', 'R', 'S', '\a', '\x19', 
		'\x2', '\x2', 'S', 'g', '\x5', '\x4', '\x3', '\x13', 'T', 'U', '\a', '\x1A', 
		'\x2', '\x2', 'U', 'g', '\x5', '\x4', '\x3', '\x12', 'V', 'W', '\a', '\x4', 
		'\x2', '\x2', 'W', 'X', '\x5', '\x4', '\x3', '\x2', 'X', 'Y', '\a', '\x5', 
		'\x2', '\x2', 'Y', 'g', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x4', 
		'\x2', '\x2', '[', '\\', '\x5', '\x4', '\x3', '\x2', '\\', ']', '\a', 
		'\x5', '\x2', '\x2', ']', '^', '\x5', '\x4', '\x3', '\b', '^', 'g', '\x3', 
		'\x2', '\x2', '\x2', '_', 'g', '\a', '\f', '\x2', '\x2', '`', '\x62', 
		'\a', '\x15', '\x2', '\x2', '\x61', '\x63', '\a', '\v', '\x2', '\x2', 
		'\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x63', 'g', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\a', 
		'\x18', '\x2', '\x2', '\x65', 'g', '\a', '\x35', '\x2', '\x2', '\x66', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x66', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x18', '\x3', '\x2', '\x2', '\x2', '\x66', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x66', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\'', '\x3', '\x2', '\x2', '\x2', '\x66', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '+', '\x3', '\x2', '\x2', '\x2', '\x66', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '/', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x66', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x35', '\x3', '\x2', '\x2', '\x2', '\x66', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x39', '\x3', '\x2', '\x2', '\x2', '\x66', 
		';', '\x3', '\x2', '\x2', '\x2', '\x66', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x44', '\x3', '\x2', '\x2', '\x2', '\x66', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'H', '\x3', '\x2', '\x2', '\x2', '\x66', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'L', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x66', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'R', '\x3', '\x2', '\x2', '\x2', '\x66', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'V', '\x3', '\x2', '\x2', '\x2', '\x66', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '_', '\x3', '\x2', '\x2', '\x2', '\x66', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\x87', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\f', '\x11', '\x2', '\x2', 'i', 'j', '\a', '\x16', '\x2', 
		'\x2', 'j', '\x86', '\x5', '\x4', '\x3', '\x12', 'k', 'l', '\f', '\x10', 
		'\x2', '\x2', 'l', 'm', '\a', '\x17', '\x2', '\x2', 'm', '\x86', '\x5', 
		'\x4', '\x3', '\x11', 'n', 'o', '\f', '\xF', '\x2', '\x2', 'o', 'p', '\t', 
		'\x2', '\x2', '\x2', 'p', '\x86', '\x5', '\x4', '\x3', '\x10', 'q', 'r', 
		'\f', '\xE', '\x2', '\x2', 'r', 's', '\t', '\x3', '\x2', '\x2', 's', '\x86', 
		'\x5', '\x4', '\x3', '\xF', 't', 'u', '\f', '\r', '\x2', '\x2', 'u', 'v', 
		'\a', '\x10', '\x2', '\x2', 'v', '\x86', '\x5', '\x4', '\x3', '\xE', 'w', 
		'x', '\f', '\f', '\x2', '\x2', 'x', 'y', '\t', '\x4', '\x2', '\x2', 'y', 
		'\x86', '\x5', '\x4', '\x3', '\r', 'z', '{', '\f', '\v', '\x2', '\x2', 
		'{', '|', '\t', '\x5', '\x2', '\x2', '|', '\x86', '\x5', '\x4', '\x3', 
		'\f', '}', '~', '\f', '\a', '\x2', '\x2', '~', '\x7F', '\t', '\x6', '\x2', 
		'\x2', '\x7F', '\x86', '\x5', '\x4', '\x3', '\b', '\x80', '\x81', '\f', 
		'\t', '\x2', '\x2', '\x81', '\x82', '\a', '\x4', '\x2', '\x2', '\x82', 
		'\x83', '\x5', '\x4', '\x3', '\x2', '\x83', '\x84', '\a', '\x5', '\x2', 
		'\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x85', 'k', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x85', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x85', 't', '\x3', '\x2', '\x2', '\x2', '\x85', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x85', 'z', '\x3', '\x2', '\x2', '\x2', '\x85', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x80', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8E', 
		'\a', '\x36', '\x2', '\x2', '\x8B', '\x8D', '\v', '\x2', '\x2', '\x2', 
		'\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\x2', 
		'\x2', '\x3', '\x92', '\t', '\x3', '\x2', '\x2', '\x2', '\t', '\f', '\xF', 
		'\x62', '\x66', '\x85', '\x87', '\x8E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
